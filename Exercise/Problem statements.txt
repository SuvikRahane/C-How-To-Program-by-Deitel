Chapter 5th: Functions

5.10: Solved example - A player rolls two dice. Each die has six faces.  These faces contain 1, 2, 3, 4, 5 and 6
spots. After the dice have come to rest, the sum of the spots on the two upward faces is calculated.
If the sum is 7 or 11 on the first throw, the players wins. If the sum is 2, 3 or 12 on the first throw 
(called "craps"), the playe loses(i.e the "house" wins). If the sum is 4,5,6,8,9 or 10 on the first throw, then
that sum becomes the player's "point". To win, you must continue rolling the dice until you "make your point."
The player loses by rolling a 7 before making the point.

5.12 Scope Rules: solved example for scope rules.

5.13: Recursion - Implemented menu driven program for recursion. Covered topics are Factorial, Fibonnacci series, GCD using recursion.
TODO: Tower of honoi using recusion

       
From exercises:

5.9: Garage - A parking garage charges a $2.00 minimum fee to park for up to three hours. The garage charges an additional $0.05 per hour for each
hour or part thereof in excess of three hours. The maximum charge for any given 24 hours period is $10.00. Assume that no car pars for longer than
24 hours at a time. Write a program that will calculate and print parking charges for each of 3 customers. your program should print the results 
in a neat tabular format, and should calculate and print the total of yesterday's receipts.

5.26: An integer number is said to be a perfect number, if its factor, including 1 (but not the number itself). Sum to the number. 
example : 6 is perfect number because 6: 1 + 2 + 3 = 6.

5.28: Write a program to that takes an integer value and print the numberwith its digits reversed. For example, input: 1234 output:4321

5.29: Computer are playing an increasing role in education. Write a program that will help in elementary school student learn multiplication question
and answer. Use rand to produce two positive one digit integers. It should the type a question such as "How much is 6 times 7? \nanswer is: 42"
BUG: FIX IT.



Chapter 6th: Arrays

    6.6: Bubble Sort: Regular way and Optimized way.
    6.11: Example to implement static variable initialization
    6.13: Array as a argument to the function
    6.16: Survey data analysis. Mean, mode and median.
    6.18: Linear search in an array
    6.19: Binary search. Display same output as given in the book.
    6.22: Example of Double scripted array.(Curtasy: book)

From Exercise:
    6.10: Use 1D array to solve the following problem. A company pays its sales people on a commision basis. The sales people receive $200 per week
          plus 9% of their gross sales for that week. For example, a salesperson who grosses $3000 in sales in a week receives $200 plus 9% of $3000
          or a total $470.
          Write a C program that determines how many of the salesperson earned salaries in each of the following range
          $200 - $299, $300 - $399, $400 - $499, $500 - $599... $1000 and over
          
    6.15: Use a single-subscripted array to solve the following problem.Read in 20 numbers, each of which is between 10 and 100, inclusive. As each 
          number is read, print it only if it is not a duplicate of a number already read. Provide from the "worst case" in which all 20 number are different
          Use the smallest possible array to solve this problem          
    
    6.17: print the output of code: recursive - sum
    
    6.21: (Airline reservation system)A small airline has just purchased a computer for its new automated reservation system. The president has asked
       you to program the new system in c. you are to write a program to assign seats on each flight of the airline's only plane.(Capacity: 10 seats)
       Your program should display the following menu of alternatives:
            Please type 1 for "Smoking"
            Please type 2 for "Non smoking"
        If the person types 1, then your program should assign seat in the smoking section(seat 1 - 5). If the person types 2, then your program should
        assign seat in non smoking section(seat 6 to 10). Your program should then print a boarding pass indicating the person's seat number and whether
        it is in the smoking or nonsmoking section of the plane.
        Use a single-subscripted array to represent the seating chart of the plane. Initialize all the elements of the arry to 0 to indicate
        that all seats are empty. As each seat is assigned set the corresponding elements of the array to 1 to indicate that the seat is no longer available
        Your program should, of course never assign a seat that has already been assigned. When the smoking section is full. your program should ask the person
        if it is acceptable to be placed in the non smoking section print the message "Next flight leave in 3 hours."
        TODO: need to test. might contain bug.
        
    6.24: (Knight's Tour) One of the more interesting puzzlers for chess buffs is the knight's tour problem, Originally proposed by the mathematician Euler. The
           question is this: can the chess piece called the knight move around the empty chessboard and touch each of the 64 squares once and only once?
           We study this intriguing problem in depth here.
            The knight makes L-shaped moves (over two in one direction and then over one in a perpendicular direction).Thus, from a square in the middle of an
            empty chessboard, the knight can make eight different moves(numbered 0 through 7).
                
                a) Draw an 8-by-8 chessboard on a sheet of paper and attempt a knight's tour by hand. Put a 1 in the first square you move to, a 2 in the second
                square, a 3 in the third, etc. Before starting the tour estimate how far you think you will get, remembering that a full tour consists of 64 moves.
                How far did you get? Were you close to the estimate?
                
                b) Now let us develop a program that will move the knight around a chessboard. The board itself is represented by an 8-by-8 double scripted array board.
                   Each of the square is initialized to zero. we describe each of the eight possible moves in terms of both their horizontal and vertical components.
                   Eight moves of knight may be described by two single-subscripted array, horizontal and vertical, as follows:
                    horizontal[0] = 2;  Vertical[0] = -1;
                    horizontal[1] = 1;  Vertical[1] = -2;
                    horizontal[2] = -1;  Vertical[2] = -2;
                    horizontal[3] = -2;  Vertical[3] = -1;
                    horizontal[4] = -2;  Vertical[4] = 1;
                    horizontal[5] = -1;  Vertical[5] = 2;
                    horizontal[6] = 1;  Vertical[6] = 2;
                    horizontal[7] = 2;  Vertical[7] = 1;
                   Let the variable currentRow and currentColumn indicate the row and column of the knight's current position. To make a move of type moveNumber, where 
                   moveNumber is between 0 to 7, your program uses the statements
                    currentRow += vertical[moveNumber];
                    currentColumn += horizontal[moveNumber];
                  Keep a counter that varies from 1 to 64. Record the lastest count in each square the knight moves to. Remember to test each potential move to see if the
                  knight has already visited that square. And, of course, test every potential move to make sure that the knight does not land off the chessboard. Run the
                  program. How many moves did the knight makes?
                c) After attempting to write and run a knight's tour program, you have probably developed some valuable insights. We will use these to develop a heuristic
                    (or strategy) for moving the knight. Heuristics do not guarantee success, but a carefully developed  heuristic greatly improves the chance of success.
                    You may have observed that the outer squares are in some sense more troublesome, or inaccessible, squares are the four corners.
                    Intuition may suggest that you should attempt to move the knight to the most troublesome squares first, and leave open those that are easiest to get
                    to so that when the board gets congested near the end of the tour there will be a greater chance of success.
                        we may develop a accessibility heuristic by classifying each of the squares according to how accessible they are, and then always moving the
                    knight to the square (within the knight's L-shaped moves, of course) that is most inaccessible. We label a double-scripted array accessibility with 
                    number indicating from how many squares each particular square is accessible. On a blank chessboard, the center squares are therefore rated as 8s,
                    the corner squares are rated as 2s, and the other squares have accessibility numbers of 3, 4 or 6 following
                            2   3   4   4   4   4   3   2
                            3   4   6   6   6   6   4   3
                            4   6   8   8   8   8   6   4
                            4   6   8   8   8   8   6   4
                            4   6   8   8   8   8   6   4
                            4   6   8   8   8   8   6   4
                            3   4   6   6   6   6   4   3
                            2   3   4   4   4   4   3   2
                    
                    Now write a version of the knight's tour program using the accessibility heuristic. At any time, the knight should move to the square with the lowest
                    accessibility number. In case of a tie, the king may move to any of the tie squares. Therefore, the tour may begin in any of the four corners.
                   (Note: As the knight moves around the chessboard, your program should reduce the accessibility number as more and more squares become occupied.
                    In this way, at any given time during the tour, each available square's accessibility number will remain equal to precisely the number of squares
                   from which that square may be reached.) Run this version of your program. Did you get a full tour?
                   Now Modify the program to run 64 tour, one from each square of the chessboard. How many full tour did you get?
                   
                d) Write a version of the Knight's tour program which, when encountering a tie between two or more squares, decides what square to choose by looking 
                   by looking ahead to those squares two or more square to choose by looking ahead to those squares reachable from the "tied" squares. Your program
                   should move to the square for which the next move would arrive at a square with the lowest accessibility number.
                 
    6.28 - (Duplicate Elimination) Write a program that produces 20 random numbers between 1 and 20. The program should store all non duplicate values in an array.
        use the smallest possible array to accomplish this task.
        
    6.30 - (The sieve of Eratosthenes) A prime integer is any integer that can be divided evenly only by itself and 1. The sieve of Eratosthenes is a method of finding
    prime number. It works as follows:
        1) Create an array with all elements initialized to 1 (true). Array elements with prime subscripts will remain 1. All other array elements will eventually be
            set to zero.
        2) Starting with array subscript 2(subscript 1 must be prime), every time an array element is found whose value is 1, loop through the remainder of the array 
        and set to zero every element whose subscript is a multiple of the subscript for the element with value 1. for array subscript 2, all elements beyond 2 in the
        array that are multiple of 2 will set to zero(subscripts 4, 6, 8, 10, etc.). For array subscript 3 all elements beyond3 in the array that are multiple of 3
        will be set to zero (subscripts 6, 9, 12, 15 etc).
        
        when this process is complete, the array elements that are still set to one indicate that the array subscript is a prime number. These subscripts can then be
        printed. write a program that uses an array of 1000 elements to determine and print the prime numbers between 1 and 999. Ignore element 0 of the array.
        Reference: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes

    6.33 - (Palindrom) A palindrome is a string that is spelled the same way forwards and backward. Some example of palindromes are: "radar", "mom", "dad". Write a 
        recursive function testPalindrome that return 1 if string stored in the array is a palindrome and 0 otherwise. The function should ignore spaces and 
        punctuation in the string.

Recursion Exercise        
    6.34 - (Linear search) Write a linear search program containing recursive function linearSearch to perform the linear search of the array. The function should 
    receive an integer array and the size of the array as arguments. If the search key is found, return the array subscript otherwise return -1.
    
    6.35 - (Binary search) Write a binary search program containing recursive function binarySearch to perform the binary search of the array. The function  should 
    receive an integer array and the starting subscript and ending subscript as arguments. If the search key is found, return the array subscript; otherwise, return
    -1. (Already completed)
	
    6.36 - (Print an array) Write a recursive function printArray that takes an array and the size of the array as arguments and return nothing. The function should
    stop processing and return when it receives an array of size zero.

    6.37 - (Print string backward) Write a recursive function strinReverse that takes a character array as an argument and return nothing. The function should stop
        processsing and return when the terminating null character of the string is encountered.

	6.39 - (Find minimum value in an array) Write a recursive function recursiveMinimum that takes an integer array and the array size as arguments and the array
        size as arguments and return the smallest element of the array. The function should stop processing and return when it receives an array of 1 element.
    
        
        

    